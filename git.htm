<!DOCTYPE HTML>
<html lang="en-US">
<head>
	<title>Git+Symphony</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=1274, user-scalable=no">
	<link rel="stylesheet" href="themes/ribbon/styles/style.css">
	<style>
		.cover h2 {
			color:#FFF;
			text-align:center;
			font-size:70px;
		}
		
		.slide { overflow:hidden }
		
		.black h2 {
			color: #000;
		}
		
		h2 span, span.pale {
			opacity: 0.5;
		}
		
		code mark.comment, .annotate {
			opacity: 0.5;
			background-color: transparent;
		}
		
		code.variable, mark.variable {
			background-color: #D2FFCB !important;
		}
		
		blockquote.elevator p {
			font-size: 1.8em;
			margin-bottom: 40px;
			opacity: 0.8;
			color: #fff;
			line-height: 45px;
		}
		
		#Firstpage h2, #FinalPage h2 {
			font-size: 2.3em;
			margin-top: 120px;
		}
	</style>
</head>
<body class="list">
	<header class="caption">
		<h1>Git+Symphony</h1>
		<p>Nils Werner, Obsessive Media</p>
	</header>
	<div class="slide bg cover" id="Firstpage"><div>
		<section>
			<header>
				<h2><span>Git+</span>Symphony</h2>
			</header>
			<img src="pictures/6163844410_666f9799da_o.jpg" alt="" />
		</section>
	</div></div>
	
	<div class="slide bg cover" id="Overview"><div>
		<section>
			<header>
				<h2><span>Git+</span>Overview</h2>
			</header>
			<img src="pictures/6065874789_61efca8fdd_o.jpg" alt="" />
		</section>
	</div></div>
	
	<div class="slide" id="TOC"><div>
		<section>
			<header>
				<h2><span>Overview=</span>What's Ahead</h2>
			</header>
			<ul>
				<li>Pitch<span class="pale">=Git in a Nutshell</span></li>
				<li>Planning<span class="pale">=An outlook to what you will be doing</span></li>
				<li>Dailies<span class="pale">=Regularily needed actions</span></li>
				<li>Core<span class="pale">=Core-development</span></li>
				<li>Deployments<span class="pale">=Deployment-specific problems</span></li>
				<li>You<span class="pale">=Discussion</span></li>
			</ul>
		</section>
	</div></div>
	
	<div class="slide bg cover" id="Pitch"><div>
		<section>
			<header>
				<h2><span>Git+</span>Pitch</h2>
			</header>
			<blockquote class="elevator">
				<p>
					<em>Git</em> is a popular decentralized version control system.
				</p>
				<p>
					But it is also a community and a workflow.
				</p>
			</blockquote>
			<img src="pictures/6051168199_f3869b2cb7_o.jpg" alt="" />
		</section>
	</div></div>
	
	
	<div class="slide bg cover" id="Planning"><div>
		<section>
			<header>
				<h2><span>Git+</span>Planning</h2>
			</header>
			<img src="pictures/5890874558_8e1aee52f7_o.jpg" alt="" />
		</section>
	</div></div>
	
	<div class="slide" id="Remotes"><div>
		<section>
			<header>
				<h2><span>Remotes=</span>At Least Two</h2>
			</header>
			<ul>
				<li>Keep official remote for upgrades</li>
				<li>Add private remote for collaboration</li>
			</ul>
			<pre>
				<code>&gt; git <mark>clone</mark> <mark class="variable">git://github.com/symphonycms/symphony-2</mark> <mark class="variable">.</mark></code>
				<code>&gt; git <mark>remote</mark> rm <mark class="variable">origin</mark></code>
				<code>&gt; git <mark>remote</mark> add <mark class="variable">origin</mark> <mark class="variable">git@codebasehq.com:nils/test/</mark></code>
				<code>&gt; git <mark>remote</mark> add <mark class="variable">upstream</mark> <mark class="variable">git://github.com/symphonyc...</mark></code>
			</pre>
		</section>
	</div></div>
	
	<div class="slide" id="gitignore"><div>
		<section>
			<header>
				<h2><span>.gitignore=</span>Ignore Certain Files</h2>
			</header>
			<p>Most cases covered by official defaults</p>
			<ul>
				<li>Installation-specific files: <span class="pale"><code>.htaccess</code>, <code>manifest/</code></span></li>
				<li>Operating System crap: <span class="pale"><code>thumbs.db</code>, <code>.DS_Store</code></span></li>
				<li>Potentially huge files: <span class="pale"><code>workspace/uploads/</code></span></li>
				<li><strong>But:</strong> we need <span class="pale"><code>workspace/</code></span></li></li>
			</ul>
		</section>
	</div></div>
	
	<div class="slide" id="config"><div>
		<section>
			<header>
				<h2><span>config.php=</span>Kind Of Shared</h2>
			</header>
			<ul>
				<li>Developers need defaults for their setup</li>
				<li>But also ability to customize their settings</li>
			</ul>
			<ul>
				<li>Copy <code>manifest/config.php</code> to <code>config-example.php</code></li>
				<li>Copy <code>.htaccess</code> to <code>htaccess-example</code></li>
			</ul>
			<p class="annotate">
				During installation simply copy files back and create <code>manifest/</code>-subdirectories.
			</p>
		</section>
	</div></div>
	
	<div class="slide bg cover" id="Dailies"><div>
		<section>
			<header>
				<h2><span>Git+</span>Dailies</h2>
			</header>
			<img src="pictures/6075307727_005cc65e08_o.jpg" alt="" />
		</section>
	</div></div>
	
	<div class="slide" id="Branching"><div>
		<section>
			<header>
				<h2><span>Branching=</span>Parallel Workflow</h2>
			</header>
			<ul>
				<li>Branch off for complex features</li>
				<li>Work locally, topic-bound</li>
				<li>Switch to other branches (other topics) at any time</li>
			</ul>
			<pre>
				<code>&gt; git <mark>checkout</mark> -b <mark class="variable">newloginform</mark></code>
				<code><mark class="comment">  # implement a "new login form"...</comment></code>
				<code>&gt; git <mark>checkout</mark> <mark class="variable">master</mark></code>
				<code><mark class="comment">  # fix some bugs, push/pull etc...</comment></code>
				<code>&gt; git <mark>checkout</mark> <mark class="variable">newloginform</mark></code>
			</pre>
		</section>
	</div></div>
	
	<div class="slide" id="Merging"><div>
		<section>
			<header>
				<h2><span>Merging=</span>Unifying Branches</h2>
			</header>
			<ul>
				<li>Bring together two separate branches</li>
				<li>Apply changes from both branches</li>
			</ul>
			<pre>
				<code>&gt; git <mark>checkout</mark> -b <mark class="variable">newloginform</mark></code>
				<code><mark class="comment">  # implement a "new login form"...</comment></code>
				<code>&gt; git <mark>checkout</mark> <mark class="variable">master</mark></code>
				<code>&gt; git <mark>merge</mark> <mark class="variable">newloginform</mark></code>
				<code><mark class="comment">  # master and newloginform are now both at HEAD</comment></code>
			</pre>
		</section>
	</div></div>
	
	<div class="slide" id="Rebasing"><div>
		<section>
			<header>
				<h2><span>Rebasing=</span>Catching Up</h2>
			</header>
			<ul>
				<li>Make topic branch catch up on its parent</li>
				<li>Does <strong>not merge</strong> the branches</li>
			</ul>
			<pre>
				<code>&gt; git <mark>checkout</mark> <mark class="variable">newloginform</mark></code>
				<code>&gt; git <mark>rebase</mark> <mark class="variable">master</mark></code>
				<code><mark class="comment">  # newloginform now contains all changes from master</comment></code>
			</pre>
			<p class="annotate">
				The catch: You cannot push rebased branches
			</p>
		</section>
	</div></div>
	
	<div class="slide" id="Extensions"><div>
		<section>
			<header>
				<h2><span>Extensions=</span>Submodules</h2>
			</header>
			<ul>
				<li>Most Extensions are available through GitHub</li>
				<li>Custom Extensions should be made available on private repos</li>
			</ul>
			<pre>
				<code>&gt; git <mark>submodule</mark> add <mark class="variable">extensions/gcse</mark> <mark class="variable">git://github.com...</mark></code>
				<code>&gt; git <mark>submodule</mark> add <mark class="variable">extensions/customui</mark> <mark class="variable">git@codebase...</mark></code>
				<code>&gt; git <mark>submodule</mark> update --init</code>
			</pre>
			<p class="annotate">
				<strong>Always use anonymous <code>git://github.com</code> URLs from GitHub!</strong>
			</p>
		</section>
	</div></div>
	
	<div class="slide" id="UpdatingExtensions"><div>
		<section>
			<header>
				<h2><span>Updating Extensions=</span>Lots Of Pulls</h2>
			</header>
			<ul>
				<li>You need to manually do a pull for each extension</li>
			</ul>
			<pre>
				<code>&gt; cd extensions/gcse</code>
				<code>&gt; git <mark>pull</mark> <mark class="variable">origin</mark> <mark class="variable">master</mark></code>
				<code>&gt; cd ../..</code>
				<code>&gt; git <mark>commit</mark> -am "GCSE updated"</code>
			</pre>
			<p class="annotate">
				You need to notify your collegues to do a <code>git submodule update <br />--init</code> next time after pulling.
			</p>
		</section>
	</div></div>
	
	<div class="slide" id="UndoUpdatingExtensions"><div>
		<section>
			<header>
				<h2><span>Undo Updating Extensions=</span>A Simple Update</h2>
			</header>
			<ul>
				<li>You noticed the new version doesn't work</li>
			</ul>
			<pre>
				<code>&gt; git <mark>submodule</mark> update --init</code>
			</pre>
			<p class="annotate">
				Reverts to last known extension version snapshot.
			</p>
		</section>
	</div></div>
	
	<div class="slide" id="Upgrading"><div>
		<section>
			<header>
				<h2><span>Upgrading=</span>Being Cautious</h2>
			</header>
			<ul>
				<li>Basically a pull from the official repository</li>
				<li>Merge conflicts likely</li>
			</ul>
			<pre>
				<code>&gt; git <mark>checkout</mark> -b <mark class="variable">upgrade</mark></code>
				<code>&gt; git <mark>pull</mark> <mark class="variable">upstream</mark> <mark class="variable">master</mark></code>
				<code>&gt; git <mark>submodule</mark> update --init</code>
				<code><mark class="comment">  # resolve merge conflicts, run update.php, run tests<br /></comment></code>
				<code>&gt; git <mark>checkout</mark> <mark class="variable">master</mark></code>
				<code>&gt; git <mark>merge</mark> <mark class="variable">upgrade</mark></code>
			</pre>
		</section>
	</div></div>
	
	<div class="slide" id="UndoUpgrading"><div>
		<section>
			<header>
				<h2><span>Undo Upgrading=</span>A Simple Checkout</h2>
			</header>
			<ul>
				<li>New version breaks everything</li>
			</ul>
			<pre>
				<code>&gt; git <mark>checkout</mark> <mark class="variable">master</mark></code>
				<code>&gt; git <mark>submodule</mark> update --init</code>
				<code><mark class="comment">  # previous, working version restored<br /></comment></code>
				<code>&gt; git <mark>branch</mark> -D <mark class="variable">upgrade</mark></code>
			</pre>
		</section>
	</div></div>
	
	<div class="slide" id="Cleanup"><div>
		<section>
			<header>
				<h2><span>Cleanup=</span>Purging Remote Branches</h2>
			</header>
			<ul>
				<li>Old, merged branches on shared repos clutter everything</li>
			</ul>
			<pre>
				<code>&gt; git <mark>push</mark> <mark class="variable">upstream</mark> <mark class="variable">:newloginform</mark></code>
				<code>&gt; git <mark>branch</mark> -D <mark class="variable">newloginform</mark></code>
			</pre>
			<p class="annotate">
				Do not delete and recreate popular branches being used by others
			</p>
		</section>
	</div></div>
	
	<div class="slide" id="Hints"><div>
		<section>
			<header>
				<h2><span>Hints=</span>Everyday Use Taught Me</h2>
			</header>
			<ul>
				<li><strong>Use it</strong>, even if you only know how to <code>init</code>, <code>add</code> and <code>commit</code></li>
				<li>Learn one command at a time as you progress</li>
				<li>Use it for everything</li>
				<li>Don't use dumb commit messages</li>
				<li>Commit early, Commit often</li>
			</ul>
		</section>
	</div></div>
	
	
	<div class="slide bg cover" id="Core"><div>
		<section>
			<header>
				<h2><span>Git+</span>Core</h2>
			</header>
			<img src="pictures/3964374780_d04ef336f6_b.jpg" alt="" />
		</section>
	</div></div>
	
	<div class="slide" id="GitHub"><div>
		<section>
			<header>
				<h2><span>GitHub=</span>Official Repository</h2>
			</header>
			<ul>
				<li>All of Symphony's code is hosted on GitHub</li>
				<li>Each contributor has his/her own fork</li>
				<li>Changes in forks become official via pull requests</li>
			</ul>
			<p class="annotate">Personal forks kept up-to-date manually by<br />pulling from official repo, then pushing to fork.</p>
		</section>
	</div></div>
	
	<div class="slide" id="BranchingModel"><div>
		<section>
			<header>
				<h2><span>Branching Model</span></h2>
			</header>
			<ul>
				<li><code class="variable">master</code> is always the latest stable version</li>
				<li><code class="variable">integration</code> is the actively developed, unstable code</li>
				<li>Topic branches are created when needed, most of them in forks</li>
			</ul>
		</section>
	</div></div>
	
	<div class="slide bg cover" id="Deployments"><div>
		<section>
			<header>
				<h2><span>Git+</span>Deployments</h2>
			</header>
			<img src="pictures/3052698754_6f96799820_o.jpg" alt="" />
		</section>
	</div></div>
	
	<div class="slide" id="PushToServer"><div>
		<section>
			<header>
				<h2><span>Push To Server=</span>Several Approaches</h2>
			</header>
			<ul>
				<li>Install Git on server</li>
				<li>Leverage Git hooks</li>
				<li>Use tools like Capistrano</li>
				<li>Rent services like Beanstalk, DeployHQ</li>
			</ul>
		</section>
	</div></div>
	
	<div class="slide" id="FilesDatabase"><div>
		<section>
			<header>
				<h2><span>Symphony=</span>Files+Database</h2>
			</header>
			<ul>
				<li>Git only does files</li>
				<li>Saving/Restoring database in/from files is easy</li>
				<li>Merging states from different servers is <strong>hard</strong></li>
			</ul>
			<p class="annotate">
				Symphony 3 will mitigate that problem by saving the Section<br />
				<em>structure</em> in XML files and offering a way to import/apply them
			</p>
		</section>
	</div></div>
	
	<div class="slide" id="Shared"><div>
		<section>
			<header>
				<h2><span>Shared=</span>One Database For All</h2>
			</header>
			<ul>
				<li>All installations use the same MySQL server</li>
				<li>Works only when connected/on site.</li>
				<li>Regular backups mandatory</li>
				<li>Not feasable for dev/stage/production environments</li>
			</ul>
		</section>
	</div></div>
	
	<div class="slide" id="DatabaseSynchronizer"><div>
		<section>
			<header>
				<h2><span>Database Synchronizer=</span>Log Structural Changes</h2>
			</header>
			<ul>
				<li>Logs MySQL-queries that are changing the Section structure</li>
				<li>Exports them so they can be re-applied on other servers</li>
				<li>Requires modifications to the core</li>
				<li>Kind of scary when you take a look at Symphony's MySQL structure</li>
			</ul>
		</section>
	</div></div>
	
	<div class="slide" id="DumpDB"><div>
		<section>
			<header>
				<h2><span>Dump DB=</span>Save Entire Database</h2>
			</header>
			<ul>
				<li>One-Click-Saving/Restoring of DB in/from file</li>
				<li>Dump can be tracked by Git</li>
				<li>Always overwrites states on other servers</li>
				<li>Switch servers readonly during development/deployment</li>
			</ul>
		</section>
	</div></div>
	
	
	
	
	<div class="slide bg cover" id="You"><div>
		<section>
			<header>
				<h2><span>Git+</span>You</h2>
			</header>
			<img src="pictures/6163373010_c6349a0327_o.jpg" alt="" />
		</section>
	</div></div>
	
	<div class="slide bg cover" id="FinalPage"><div>
		<section>
			<header>
				<h2><span>Git+</span>Symphony</h2>
			</header>
			<img src="pictures/3415452216_130fd70273_o.jpg" alt="" />
		</section>
	</div></div>
	<!--
		To hide progress bar from entire presentation
		just remove “progress” element.
		-->
	<div class="progress"><div></div></div>
	<script src="scripts/script.js"></script>
	<!-- Copyright © 2010–2011 Vadim Makeev, http://pepelsbey.net/ -->
</body>
</html>
